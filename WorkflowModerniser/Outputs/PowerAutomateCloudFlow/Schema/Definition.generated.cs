

//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace WorkflowModerniser.Outputs.PowerAutomateCloudFlow.Schema
{
#pragma warning disable // Disable all warnings

	/// <summary>
	/// The workflow.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class Definition
	{
		/// <summary>
		/// The flow run actions.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("actions")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public System.Collections.Generic.IDictionary<string, Action> Actions { get; set; }

		/// <summary>
		/// The definition metadata.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("metadata")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public object Metadata { get; set; }

		/// <summary>
		/// The definition schema.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("$schema")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public RootSchema Schema { get; set; }

		/// <summary>
		/// The flow content version. Specify using a 4-digit format, e.g., 1.0.0.0
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("contentVersion")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"(^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$)")]
		public string ContentVersion { get; set; }

		/// <summary>
		/// The flow parameters.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("parameters")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public System.Collections.Generic.IDictionary<string, Anonymous2> Parameters { get; set; }

		/// <summary>
		/// The flow triggers.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("triggers")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public System.Collections.Generic.IDictionary<string, Anonymous3> Triggers { get; set; }

		/// <summary>
		/// The flow outputs.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("outputs")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public System.Collections.Generic.IDictionary<string, Anonymous4> Outputs { get; set; }

		/// <summary>
		/// The definition description.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("description")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public string Description { get; set; }


		private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// The flow template action branch.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class FlowTemplateActionBranch
	{
		/// <summary>
		/// The actions.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("actions")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public System.Collections.Generic.IDictionary<string, Action> Actions { get; set; }


		private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// The flow template action case branch.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class FlowTemplateActionCaseBranch : FlowTemplateActionBranch
	{
		/// <summary>
		/// The case.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("case")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
		[System.ComponentModel.DataAnnotations.Required]
		public object Case { get; set; }

	}

	/// <summary>
	/// The do-until policy.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class FlowTemplateActionUntil
	{
		/// <summary>
		/// The do-until limit.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("limit")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public object Limit { get; set; }

		/// <summary>
		/// The do-until conditions.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("conditions")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public System.Collections.Generic.ICollection<Conditions> Conditions { get; set; }


		private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// A flow template action.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class Action : Anonymous5
	{
		/// <summary>
		/// The operation metadata.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("metadata")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public object Metadata { get; set; }

		/// <summary>
		/// The type of the flow operation.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("type")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public Type Type { get; set; }

		/// <summary>
		/// The kind of the flow operation.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("kind")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public Kind Kind { get; set; }

		/// <summary>
		/// The operation description.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("description")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public string Description { get; set; }

		/// <summary>
		/// The operation options.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("operationOptions")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public string OperationOptions { get; set; }

		[System.Text.Json.Serialization.JsonPropertyName("inputs")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public object Inputs { get; set; }

		/// <summary>
		/// The flow template operation runtime configuration.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("runtimeConfiguration")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public RuntimeConfiguration RuntimeConfiguration { get; set; }

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public enum RootSchema
	{

		[System.Runtime.Serialization.EnumMember(Value = @"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#")]
		Https__schema_management_azure_com_providers_Microsoft_Logic_schemas_20160601_workflowdefinition_json_ = 0,

	}

	/// <summary>
	/// The flow input template parameter.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class Anonymous2 : Anonymous6
	{
		/// <summary>
		/// The default parameter value.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("defaultValue")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public object DefaultValue { get; set; }

		/// <summary>
		/// The allowed parameter values.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("allowedValues")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public System.Collections.Generic.ICollection<object> AllowedValues { get; set; }

	}

	/// <summary>
	/// A flow template trigger.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class Anonymous3 : Anonymous7
	{
		/// <summary>
		/// The operation conditions.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("conditions")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public System.Collections.Generic.ICollection<Conditions> Conditions { get; set; }

		/// <summary>
		/// The trigger split on.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("splitOn")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public string SplitOn { get; set; }

		/// <summary>
		/// The trigger SplitOn configuration.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("splitOnConfiguration")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public SplitOnConfiguration SplitOnConfiguration { get; set; }

		/// <summary>
		/// The correlation properties.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("correlation")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public Correlation Correlation { get; set; }

	}

	/// <summary>
	/// The flow applyRuleOutputs template parameter.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class Anonymous4 : Anonymous6
	{
		/// <summary>
		/// The error of the applyRuleOutputs parameter.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("error")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public object Error { get; set; }

	}

	/// <summary>
	/// The template action expression condition.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class Conditions
	{
		/// <summary>
		/// The expression.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("expression")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public string Expression { get; set; }

		/// <summary>
		/// The dependency.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("dependsOn")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public string DependsOn { get; set; }


		private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class Anonymous5
	{
		/// <summary>
		/// The operation run after.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("runAfter")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<RunAfterType>> RunAfter { get; set; }

		/// <summary>
		/// The tracked properties.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("trackedProperties")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public object TrackedProperties { get; set; }


		private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public enum Type
	{

		[System.Runtime.Serialization.EnumMember(Value = @"ApiConnection")]
		ApiConnection = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"ApiConnectionWebhook")]
		ApiConnectionWebhook = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"ApiManagement")]
		ApiManagement = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"AppendToArrayVariable")]
		AppendToArrayVariable = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"AppendToStringVariable")]
		AppendToStringVariable = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"Batch")]
		Batch = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"Compose")]
		Compose = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"DecrementVariable")]
		DecrementVariable = 7,

		[System.Runtime.Serialization.EnumMember(Value = @"Expression")]
		Expression = 8,

		[System.Runtime.Serialization.EnumMember(Value = @"FlatFileDecoding")]
		FlatFileDecoding = 9,

		[System.Runtime.Serialization.EnumMember(Value = @"FlatFileEncoding")]
		FlatFileEncoding = 10,

		[System.Runtime.Serialization.EnumMember(Value = @"Foreach")]
		Foreach = 11,

		[System.Runtime.Serialization.EnumMember(Value = @"Function")]
		Function = 12,

		[System.Runtime.Serialization.EnumMember(Value = @"Http")]
		Http = 13,

		[System.Runtime.Serialization.EnumMember(Value = @"HttpWebhook")]
		HttpWebhook = 14,

		[System.Runtime.Serialization.EnumMember(Value = @"If")]
		If = 15,

		[System.Runtime.Serialization.EnumMember(Value = @"IncrementVariable")]
		IncrementVariable = 16,

		[System.Runtime.Serialization.EnumMember(Value = @"InitializeVariable")]
		InitializeVariable = 17,

		[System.Runtime.Serialization.EnumMember(Value = @"IntegrationAccountArtifactLookup")]
		IntegrationAccountArtifactLookup = 18,

		[System.Runtime.Serialization.EnumMember(Value = @"Join")]
		Join = 19,

		[System.Runtime.Serialization.EnumMember(Value = @"Liquid")]
		Liquid = 20,

		[System.Runtime.Serialization.EnumMember(Value = @"ParseJson")]
		ParseJson = 21,

		[System.Runtime.Serialization.EnumMember(Value = @"Query")]
		Query = 22,

		[System.Runtime.Serialization.EnumMember(Value = @"Recurrence")]
		Recurrence = 23,

		[System.Runtime.Serialization.EnumMember(Value = @"Request")]
		Request = 24,

		[System.Runtime.Serialization.EnumMember(Value = @"Response")]
		Response = 25,

		[System.Runtime.Serialization.EnumMember(Value = @"Scope")]
		Scope = 26,

		[System.Runtime.Serialization.EnumMember(Value = @"Select")]
		Select = 27,

		[System.Runtime.Serialization.EnumMember(Value = @"SendToBatch")]
		SendToBatch = 28,

		[System.Runtime.Serialization.EnumMember(Value = @"SetVariable")]
		SetVariable = 29,

		[System.Runtime.Serialization.EnumMember(Value = @"SlidingWindow")]
		SlidingWindow = 30,

		[System.Runtime.Serialization.EnumMember(Value = @"Switch")]
		Switch = 31,

		[System.Runtime.Serialization.EnumMember(Value = @"Table")]
		Table = 32,

		[System.Runtime.Serialization.EnumMember(Value = @"Terminate")]
		Terminate = 33,

		[System.Runtime.Serialization.EnumMember(Value = @"Until")]
		Until = 34,

		[System.Runtime.Serialization.EnumMember(Value = @"Wait")]
		Wait = 35,

		[System.Runtime.Serialization.EnumMember(Value = @"Workflow")]
		Workflow = 36,

		[System.Runtime.Serialization.EnumMember(Value = @"XmlValidation")]
		XmlValidation = 37,

		[System.Runtime.Serialization.EnumMember(Value = @"Xslt")]
		Xslt = 38,

		[System.Runtime.Serialization.EnumMember(Value = @"OpenApiConnection")]
		OpenApiConnection = 3
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public enum Kind
	{

		[System.Runtime.Serialization.EnumMember(Value = @"AddToTime")]
		AddToTime = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Alert")]
		Alert = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"ApiConnection")]
		ApiConnection = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"AzureMonitorAlert")]
		AzureMonitorAlert = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Button")]
		Button = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"ConvertTimeZone")]
		ConvertTimeZone = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"CurrentTime")]
		CurrentTime = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"EventGrid")]
		EventGrid = 7,

		[System.Runtime.Serialization.EnumMember(Value = @"Geofence")]
		Geofence = 8,

		[System.Runtime.Serialization.EnumMember(Value = @"GetFutureTime")]
		GetFutureTime = 9,

		[System.Runtime.Serialization.EnumMember(Value = @"GetPastTime")]
		GetPastTime = 10,

		[System.Runtime.Serialization.EnumMember(Value = @"Http")]
		Http = 11,

		[System.Runtime.Serialization.EnumMember(Value = @"JsonToJson")]
		JsonToJson = 12,

		[System.Runtime.Serialization.EnumMember(Value = @"JsonToText")]
		JsonToText = 13,

		[System.Runtime.Serialization.EnumMember(Value = @"PowerApp")]
		PowerApp = 14,

		[System.Runtime.Serialization.EnumMember(Value = @"SecurityCenterAlert")]
		SecurityCenterAlert = 15,

		[System.Runtime.Serialization.EnumMember(Value = @"SubtractFromTime")]
		SubtractFromTime = 16,

		[System.Runtime.Serialization.EnumMember(Value = @"XmlToJson")]
		XmlToJson = 17,

		[System.Runtime.Serialization.EnumMember(Value = @"XmlToText")]
		XmlToText = 18,

	}

	/// <summary>
	/// The flow concurrency configuration.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class FlowConcurrencyConfiguration
	{
		/// <summary>
		/// The repetitions.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("repetitions")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public int Repetitions { get; set; }

		/// <summary>
		/// The runs.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("runs")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public int Runs { get; set; }

		/// <summary>
		/// The maximum waiting runs.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("maximumWaitingRuns")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public int MaximumWaitingRuns { get; set; }


		private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// The flow content transfer configuration.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class FlowContentTransferConfiguration
	{

		[System.Text.Json.Serialization.JsonPropertyName("transferMode")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public FlowContentTransferMode TransferMode { get; set; }


		private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// The flow content transfer mode.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public enum FlowContentTransferMode
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Chunked")]
		Chunked = 0,

	}

	/// <summary>
	/// The flow pagination policy.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class FlowPaginationPolicy
	{
		/// <summary>
		/// The minimum item count.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("minimumItemCount")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public int MinimumItemCount { get; set; }


		private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class RuntimeConfiguration
	{

		[System.Text.Json.Serialization.JsonPropertyName("paginationPolicy")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public FlowPaginationPolicy PaginationPolicy { get; set; }

		[System.Text.Json.Serialization.JsonPropertyName("contentTransfer")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public FlowContentTransferConfiguration ContentTransfer { get; set; }

		[System.Text.Json.Serialization.JsonPropertyName("concurrency")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public FlowConcurrencyConfiguration Concurrency { get; set; }


		private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// The flow template parameter.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class Anonymous6
	{
		/// <summary>
		/// The parameter type.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("type")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public Type2 Type { get; set; }

		/// <summary>
		/// The parameter value.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("value")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public object Value { get; set; }

		/// <summary>
		/// The parameter metadata.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("metadata")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public object Metadata { get; set; }

		/// <summary>
		/// The parameter description.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("description")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public string Description { get; set; }


		private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class Anonymous7
	{
		/// <summary>
		/// The operation metadata.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("metadata")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public object Metadata { get; set; }

		/// <summary>
		/// The type of the flow operation.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("type")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public Type Type { get; set; }


		/// <summary>
		/// The operation description.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("description")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public string Description { get; set; }

		/// <summary>
		/// The operation options.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("operationOptions")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public string OperationOptions { get; set; }

		/// <summary>
		/// The flow template operation runtime configuration.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("runtimeConfiguration")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public RuntimeConfiguration RuntimeConfiguration { get; set; }


		private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class SplitOnConfiguration
	{
		/// <summary>
		/// The correlation properties.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("correlation")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public Correlation2 Correlation { get; set; }


		private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class Correlation
	{
		/// <summary>
		/// The client tracking identifier.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("clientTrackingId")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public string ClientTrackingId { get; set; }


		private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// The status of a flow.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public enum RunAfterType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Aborted")]
		Aborted = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
		Cancelled = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Failed")]
		Failed = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"Faulted")]
		Faulted = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Ignored")]
		Ignored = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"Paused")]
		Paused = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"Running")]
		Running = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"Skipped")]
		Skipped = 7,

		[System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
		Succeeded = 8,

		[System.Runtime.Serialization.EnumMember(Value = @"Suspended")]
		Suspended = 9,

		[System.Runtime.Serialization.EnumMember(Value = @"TimedOut")]
		TimedOut = 10,

		[System.Runtime.Serialization.EnumMember(Value = @"Waiting")]
		Waiting = 11,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public enum Type2
	{

		[System.Runtime.Serialization.EnumMember(Value = @"Array")]
		Array = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Bool")]
		Bool = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Float")]
		Float = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"Int")]
		Int = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"Object")]
		Object = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"SecureObject")]
		SecureObject = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"SecureString")]
		SecureString = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"String")]
		String = 7,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
	public partial class Correlation2
	{
		/// <summary>
		/// The client tracking identifier.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("clientTrackingId")]

		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		public string ClientTrackingId { get; set; }


		private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}
}